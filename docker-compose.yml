services:
  db:
    build: ./src/db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: new_docker_user
      POSTGRES_DB: new_docker_db
    volumes:
      - db_data:/var/lib/postgresql/data
    # Health check configuration
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U new_docker_user -d new_docker_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - postgresql
  ws:
    build: ./src/ws
    restart: always
    environment:
      DEST_EMAIL: ${DEST_EMAIL}
      SRC_EMAIL: ${SRC_EMAIL}
      RELEASE_VERSION: ${RELEASE_VERSION}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DB_HOST: db
      DB_NAME: new_docker_db
      DB_USER: new_docker_user
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      USE_AWS_LAMBDA_FILE: False
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - postgresql
  ts:
    build: ./src/ts
    restart: always
    environment:
      WS_HOST: ws
    depends_on:
      - ws
    networks:
      - postgresql
  curl:
    image: curlimages/curl
    command: sh -c "sleep 30 && curl http://ws:8000/run-task/ogre"
    networks:
      - postgresql
    depends_on:
      - ts
# web:
#  image:  vfedotovsdocker/st-web:latest-amd64   #Use the specified Docker image
#  ports:
#   - "80:8501"
#   environment:
#   - STREAMLIT_SERVER_PORT=8501  # Set the port for the Streamlit server


networks:
  postgresql:
    driver: bridge
volumes:
  db_data:
    driver: local
