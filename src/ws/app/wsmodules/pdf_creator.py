""" pdf_creator.py module

Main module usage is for:
    1. Import cleaned-sorted-df.csv file as pandas data frame in memory
    2. Create customized pdf file for report
        2.1. Include in report text from basic_price_stats.txt (generated by analitics.py)
            2.1.1. requires file 1_rooms_tmp.txt (generated by data_formater.py:)
        2.2. Create png charts from data frame price/sqm relationship
        2.3. Include png charts to pdf file
    6. Save pdf file as Ogre_city_report.pdf
"""
from datetime import datetime
import pandas as pd
from fpdf import FPDF


# This module functional requirements:
# 1. [x] Load data from csv file exported with python pandas df
# 2. [ ] Ability to create pdf file
#   - [x] functionality change report titles and data frames ( example multiple cities)
#   - [x] functionality to create charts (scatter plots) from data frame
#   - [x] functionality to ave scatter plot to png file
#   - [x] functionality to Import/add .png file to pdf file
#   - [x] functionality to write text from data frame to pdf file
#   - [ ] functionality to Include file created date in pdf report

def pdf_creator_main():
    """ Main module function """
    print("Debug info: Starting pdf creator module ... ")

    # loading df
    data_frame_file = 'cleaned-sorted-df.csv'
    all_rooms_data_frame = pd.read_csv(data_frame_file)

    # categorize to segments by room count type
    # FIXME move to function that has for loop with range 4 and returns list of 4 dfs
    one_room_df = filter_df_by(all_rooms_data_frame, 'Room_count', 1)
    two_room_df = filter_df_by(all_rooms_data_frame, 'Room_count', 2)
    three_room_df = filter_df_by(all_rooms_data_frame, 'Room_count', 3)
    four_room_df = filter_df_by(all_rooms_data_frame, 'Room_count', 4)

    # generating and saving charts to files for Size_sqm/Price_in_eur relationships
    # FIXME move to function that has for loop with range 4 that creates  4 png files + allroom.png file
    create_png_plot(all_rooms_data_frame, 'Size_sqm', "Price_in_eur",
                    "All 1-4 room apartments", '1-4_rooms.png')
    create_png_plot(one_room_df, 'Size_sqm', "Price_in_eur",
                    "Single room apartments", '1_rooms.png')
    create_png_plot(two_room_df, 'Size_sqm', "Price_in_eur",
                    "Double room apartments", '2_rooms.png')
    create_png_plot(three_room_df, 'Size_sqm', "Price_in_eur",
                    "Three room apartments", '3_rooms.png')
    create_png_plot(four_room_df, 'Size_sqm', "Price_in_eur",
                    "Four room apartments", '4_rooms.png')

    # continue work from here
    # starnge var naming should include analytics type
    report_txt_lines = read_file_to_list('basic_price_stats.txt')
    # seems missing 3 files for other room types
    # one_room_apt_txt_lines = read_file_to_list('1_rooms_tmp.txt')
    one_room_apt_txt_lines = ['Some text goes here']

    # creating pdf file
    # FIXME include todays data
    create_pdf_report(report_txt_lines, one_room_apt_txt_lines)
    print("Debug info: Completed pdf creator module module ... ")


def create_sqm_price_images(data_frames,
                            first_column: str, second_column: str) -> None:
    """ TODO """
    titles_image_names = {
        'Single room apartments': '1_rooms.png',
        'Double room apartments': '2_rooms.png',
        'Three room apartments': '3_rooms.png',
        'Four room apartments': '4_rooms.png'}
    all_apts_df = pd.read_csv('cleaned-sorted-df.csv')

    i = 0
    for title, file_name in titles_image_names.items():
        create_and_save_chart(
            data_frames[i],  # << seem to be misisng i
            first_column,
            second_column,
            title,
            file_name
        )
        i = i + 1

    # case of all apartments
    create_and_save_chart(
        all_apts_df,
        first_column,
        second_column,
        'All apartments',
        'all_rooms.png'
    )


def split_data_frame(all_rooms_df, column_name: str, column_value: int) -> list:
    """filter data frame by column name Room_count value
    and returns list with 4 filtered by room count value data frames"""
    data_frames = []
    for i in range(1, 5):
        df = filter_df_by(all_rooms_df, 'Room_count', i)
        data_frames.append(df)
    return data_frames


def create_and_save_chart(df_name: str, xcolumn_name: str,
                          ycolumn_name: str, title: str, file_name: str) -> None:
    """Generate scatter plot based x and y axsis as data frame column values,
    include title and save to *.png file"""
    ax = df_name.plot.scatter(
        x=xcolumn_name,
        y=ycolumn_name,
        s=100,
        title=title,
        grid=True
    )
    fig = ax.get_figure()
    # fi.show() # for debugging
    fig.savefig(file_name)


def create_png_plot(df,
                    x_keyword: str,
                    y_keyword: str,
                    title: str,
                    file_to_save: str) -> None:
    """ This function generates scatter plots from dataframe
    based on x and y keywords and saves chart to png file"""
    ax = df.plot.scatter(x=x_keyword, y=y_keyword, s=100,
                         title=title, grid=True)
    fig = ax.get_figure()
    # fi.show() # for debugging
    fig.savefig(file_to_save)


def create_pdf(data_frame, title: str, date: str, file_to_save: str) -> None:
    """ This function will build report from report parts"""
    pass


def create_pdf_report(text_lines: list, msg_txt_lines: list) -> None:
    """ This is draft function to test ability to write to create and write pdf file """
    # library help https://pyfpdf.readthedocs.io/en/latest/reference/image/index.html
    report_title = "Ogre city apartments for sale listed today"
    todays_date = datetime.today().strftime('%Y-%m-%d %H:%M')

    # creating pdf object instance
    pdf = FPDF()  # A4 (210 by 297 mm)
    pdf.add_page()
    pdf.set_font('Arial', 'B', 10)

    # Adding title and date to page
    report_title = "Ogre city apartments for sale"
    date_created = f"Report date: {todays_date}"
    pdf.write(5, report_title)  # write str text to pdf
    pdf.ln(5)
    pdf.write(5, date_created)  # write str text to pdf
    pdf.ln(5)

    # writing text lines to page from text_line list
    for line in text_lines:
        str_line = str(line)
        pdf.write(5, str_line)
        pdf.ln(5)

    pdf.ln(10)
    pdf.add_page()
    test_save_df_to_png()  # calling function to generate png from df
    pdf.ln(10)
    pdf.ln(10)
    pdf.image("1_rooms.png", 20, 10, 150)
    pdf.add_page()
    pdf.image("2_rooms.png", 20, 10, 150)
    pdf.add_page()
    pdf.image("3_rooms.png", 20, 10, 150)
    pdf.add_page()
    pdf.image("4_rooms.png", 20, 10, 150)
    pdf.add_page()
    pdf.image("1-4_rooms.png", 20, 10, 150)
    pdf.ln(10)

    pdf.output(name="Ogre_city_report.pdf")  # generate pdf files


def test_save_df_to_png():
    """ This is draft test function to crete graph from df ans ave to png """
    df = pd.read_csv("cleaned-sorted-df.csv")
    ax = df.plot.scatter(x='Size_sqm',
                           y="Price_in_eur",
                           s=100,
                           title="All 1-4 room apartments",
                           grid=True)
    fig = ax.get_figure()
    # fi.show() # for debugging
    fig.savefig('test.png')


def filter_df_by(data_frame, col_name: str, value):
    """ Filters data frame by keyword """
    filtered_df = data_frame.loc[data_frame[col_name] == value]
    return filtered_df


def read_file_to_list(file_name: str) -> list:
    """ Function opens tx file and reads all lines and return as list"""
    with open(file_name, 'r') as filehandle:
        return [curr_line.rstrip() for curr_line in filehandle.readlines()]


def test_create_scatter_plot():
    """ Function with examples how to create scatter and py chart """
    # Testing scatter chart$
    # sorted_by_sqm.plot.scatter(x='Size_sqm',y="Price_EUR",s=100,
    #                           title="All 1-4 room apartments",grid=True)
    # only_1_rooms.plot.scatter(x='Size_sqm',y="Price_EUR",s=100,
    #                          title="Only 1 room apartments",grid=True)
    # only_2_rooms.plot.scatter(x='Size_sqm',y="Price_EUR",s=100,
    #                          title="Only 2 room apartments",grid=True)
    # only_3_rooms.plot.scatter(x='Size_sqm',y="Price_EUR",s=100,
    #                          title="Only 3 room apartments",grid=True)
    # Testing charts
    # only_2_rooms.groupby(['Size_sqm']).sum().plot(kind='pie',
    #                                               subplots=True,
    #                                               figsize=(7,7),
    #                                               autopct='%1.1f%%')


if __name__ == "__main__":
    pdf_creator_main()
