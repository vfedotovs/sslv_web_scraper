---
name: CICD-arm-dev-m5-branches
on:
  workflow_dispatch:

jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install pytest
          python -m pip install coverage
          pip install -r ./src/ws/requirements.txt
          pip install -r ./src/ts/requirements.txt
      - name: Run pytest cov report
        run: |
          coverage run -m pytest
          coverage xml -o coverage.xml
        continue-on-error: true  # Ignore the failure of this step
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: coverage-report
          path: coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  Build:
    needs: Test
    runs-on: ubuntu-latest
    env:
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      RELEASE_VERSION: ${{ secrets.RELEASE_VERSION }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SRC_EMAIL: ${{ secrets.SRC_EMAIL }}
      DEST_EMAIL: ${{ secrets.DEST_EMAIL }}
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup creating database.ini env file
        run: |
          echo "[postgresql]" > src/ws/database.ini
          echo "host=db" >> src/ws/database.ini
          echo "${{ secrets.PG_DB_NAME }}" >> src/ws/database.ini
          echo "${{ secrets.PG_DB_USER }}" >> src/ws/database.ini
          echo "${{ secrets.PG_DB_PASS }}" >> src/ws/database.ini
          ls -la src/ws | grep ini
          cat src/ws/database.ini
      - name: Before build step 2 create .env.prod file
        run: |
          echo "# ws_worker container env variables" > .env.prod
          echo "${{ secrets.DEST_EMAIL }}" >> .env.prod
          echo "${{ secrets.SRC_EMAIL }}" >> .env.prod
          echo "${{ secrets.SENDGRID_API_KEY }}" >> .env.prod
          echo "${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
          ls -la | grep env
          cat .env.prod
      - name: Show environment
        run: |
          cat /etc/os-release
          docker -v
          docker compose version
          python3 -V
          pip install boto3
      - name: Setup step 3 download last DB file from S3 bucket
        run: |
          python3 ./src/db/get_last_db_backup.py
          cp *.sql ./src/db
          ls -lh ./src/db | grep sql
          ls -l ./src/db | grep sql
      - name: Start DB container ONLY
        run: docker compose --env-file .env.prod up -d db 
          
      - name: List DB table sizes to confirm if DB import was correct
        run: |
          sleep 15
          docker compose ps
          docker exec sslv_web_scraper-db-1  \
            psql -U new_docker_user -d new_docker_db -c '\dt+'

      - name: Start WS container ONLY
        run: docker compose --env-file .env.prod up -d ws 
        
      - name: Start TS container ONLY
        run: docker compose --env-file .env.prod up -d ts 
          
      - name: Wait for 15 seconds and run docker compose ps
        run: |
          sleep 15
          docker compose ps
          
      - name: Run compose down
        run: |
          docker compose down
          sleep 15
          docker compose ps
  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up SSH key
        run: |
          echo "${{ secrets.M5_EC2_PK }}" > private_key
          chmod 600 private_key
      - name: Deploy to Release EC2
        env:
          HOSTNAME: ${{ secrets.M5_EC2_IP }}
          USER_NAME: ${{ secrets.M5_EC2_USER }}
          DEPLOY_TARGET_BRANCH: ${{ secrets.M5_DEPLOY_TARGET_BRANCH }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key "${USER_NAME}@${HOSTNAME}" 'bash -s' <<'EOF'
            set -e

            echo "Navigating to release directory..."
            curr_time=$(date +%Y%m%d-%H%M)
            folder_name="${curr_time}-deploy"
            mkdir -p $folder_name && cd $folder_name

            echo "Cloning repository and checking out target branch..."
            git clone https://github.com/vfedotovs/sslv_web_scraper.git .
            git switch dev-1.5.8

            echo "Cleaning up old Docker containers and images..."
            docker-compose down --volumes --remove-orphans
            docker-compose rm -f

            echo "Starting services..."
            make ec2_setup
            sleep 5
            make ec2_build
            sleep 5
            make ec2_up
          
            echo "Deployment completed. Current Docker status:"
            sleep 20
            docker ps
          EOF
